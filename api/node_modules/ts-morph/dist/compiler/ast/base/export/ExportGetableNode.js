"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors = require("../../../../errors");
var typescript_1 = require("../../../../typescript");
var utils_1 = require("../../../../utils");
var ModifierableNode_1 = require("../ModifierableNode");
function ExportGetableNode(Base) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.hasExportKeyword = function () {
            return this.getExportKeyword() != null;
        };
        class_1.prototype.getExportKeyword = function () {
            if (utils_1.TypeGuards.isVariableDeclaration(this)) {
                var variableStatement = this.getVariableStatement();
                return variableStatement == null ? undefined : variableStatement.getExportKeyword();
            }
            if (!utils_1.TypeGuards.isModifierableNode(this))
                return throwForNotModifierableNode();
            return this.getFirstModifierByKind(typescript_1.SyntaxKind.ExportKeyword);
        };
        class_1.prototype.getExportKeywordOrThrow = function () {
            return errors.throwIfNullOrUndefined(this.getExportKeyword(), "Expected to find an export keyword.");
        };
        class_1.prototype.hasDefaultKeyword = function () {
            return this.getDefaultKeyword() != null;
        };
        class_1.prototype.getDefaultKeyword = function () {
            if (utils_1.TypeGuards.isVariableDeclaration(this)) {
                var variableStatement = this.getVariableStatement();
                return variableStatement == null ? undefined : variableStatement.getDefaultKeyword();
            }
            if (!utils_1.TypeGuards.isModifierableNode(this))
                return throwForNotModifierableNode();
            return this.getFirstModifierByKind(typescript_1.SyntaxKind.DefaultKeyword);
        };
        class_1.prototype.getDefaultKeywordOrThrow = function () {
            return errors.throwIfNullOrUndefined(this.getDefaultKeyword(), "Expected to find a default keyword.");
        };
        class_1.prototype.isExported = function () {
            if (this.hasExportKeyword())
                return true;
            var thisSymbol = this.getSymbol();
            var sourceFileSymbol = this.getSourceFile().getSymbol();
            if (thisSymbol == null || sourceFileSymbol == null)
                return false;
            return sourceFileSymbol.getExports().some(function (e) { return e === thisSymbol || e.getAliasedSymbol() === thisSymbol; });
        };
        class_1.prototype.isDefaultExport = function () {
            if (this.hasDefaultKeyword())
                return true;
            var thisSymbol = this.getSymbol();
            if (thisSymbol == null)
                return false;
            var defaultExportSymbol = this.getSourceFile().getDefaultExportSymbol();
            if (defaultExportSymbol == null)
                return false;
            if (thisSymbol === defaultExportSymbol)
                return true;
            var aliasedSymbol = defaultExportSymbol.getAliasedSymbol();
            return thisSymbol === aliasedSymbol;
        };
        class_1.prototype.isNamedExport = function () {
            var thisSymbol = this.getSymbol();
            var sourceFileSymbol = this.getSourceFile().getSymbol();
            if (thisSymbol == null || sourceFileSymbol == null)
                return false;
            return !isDefaultExport() && sourceFileSymbol.getExports().some(function (e) { return e === thisSymbol || e.getAliasedSymbol() === thisSymbol; });
            function isDefaultExport() {
                var defaultExportSymbol = sourceFileSymbol.getExportByName("default");
                if (defaultExportSymbol == null)
                    return false;
                return thisSymbol === defaultExportSymbol || thisSymbol === defaultExportSymbol.getAliasedSymbol();
            }
        };
        return class_1;
    }(Base));
}
exports.ExportGetableNode = ExportGetableNode;
function throwForNotModifierableNode() {
    throw new errors.NotImplementedError("Not implemented situation where node was not a " + "ModifierableNode" + ".");
}
