"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors = require("../../../../errors");
var typescript_1 = require("../../../../typescript");
var utils_1 = require("../../../../utils");
var callBaseSet_1 = require("../../callBaseSet");
var callBaseGetStructure_1 = require("../../callBaseGetStructure");
var ExportGetableNode_1 = require("./ExportGetableNode");
function ExportableNode(Base) {
    return apply(ExportGetableNode_1.ExportGetableNode(Base));
}
exports.ExportableNode = ExportableNode;
// couldn't figure out how to inline this and make the compiler happy
function apply(Base) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.setIsDefaultExport = function (value) {
            if (value === this.isDefaultExport())
                return this;
            if (value && !utils_1.TypeGuards.isSourceFile(this.getParentOrThrow()))
                throw new errors.InvalidOperationError("The parent must be a source file in order to set this node as a default export.");
            // remove any existing default export
            var sourceFile = this.getSourceFile();
            var fileDefaultExportSymbol = sourceFile.getDefaultExportSymbol();
            if (fileDefaultExportSymbol != null)
                sourceFile.removeDefaultExport(fileDefaultExportSymbol);
            if (!value)
                return this;
            // set this node as the one to default export
            if (utils_1.TypeGuards.hasName(this) && shouldWriteAsSeparateStatement.call(this)) {
                var parentSyntaxList = this.getFirstAncestorByKindOrThrow(typescript_1.SyntaxKind.SyntaxList);
                var name_1 = this.getName();
                parentSyntaxList.insertChildText(this.getChildIndex() + 1, function (writer) {
                    writer.newLine().write("export default " + name_1 + ";");
                });
            }
            else {
                this.addModifier("export");
                this.addModifier("default");
            }
            return this;
            function shouldWriteAsSeparateStatement() {
                if (utils_1.TypeGuards.isEnumDeclaration(this) || utils_1.TypeGuards.isNamespaceDeclaration(this) || utils_1.TypeGuards.isTypeAliasDeclaration(this))
                    return true;
                if (utils_1.TypeGuards.isAmbientableNode(this) && this.isAmbient())
                    return true;
                return false;
            }
        };
        class_1.prototype.setIsExported = function (value) {
            // remove the default keyword if it exists
            if (utils_1.TypeGuards.isSourceFile(this.getParentOrThrow()))
                this.toggleModifier("default", false);
            this.toggleModifier("export", value);
            return this;
        };
        class_1.prototype.set = function (structure) {
            callBaseSet_1.callBaseSet(Base.prototype, this, structure);
            if (structure.isExported != null)
                this.setIsExported(structure.isExported);
            if (structure.isDefaultExport != null)
                this.setIsDefaultExport(structure.isDefaultExport);
            return this;
        };
        class_1.prototype.getStructure = function () {
            return callBaseGetStructure_1.callBaseGetStructure(Base.prototype, this, {
                isExported: this.hasExportKeyword(),
                isDefaultExport: this.hasDefaultKeyword()
            });
        };
        return class_1;
    }(Base));
}
