"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var compiler_1 = require("../../compiler");
var errors = require("../../errors");
var utils_1 = require("../../utils");
var FactoryStructurePrinter_1 = require("../FactoryStructurePrinter");
var formatting_1 = require("../formatting");
var NamespaceDeclarationStructurePrinter = /** @class */ (function (_super) {
    tslib_1.__extends(NamespaceDeclarationStructurePrinter, _super);
    function NamespaceDeclarationStructurePrinter(factory, options) {
        var _this = _super.call(this, factory) || this;
        _this.options = options;
        _this.blankLineFormattingWriter = new formatting_1.BlankLineFormattingStructuresPrinter(_this);
        return _this;
    }
    NamespaceDeclarationStructurePrinter.prototype.printTexts = function (writer, structures) {
        this.blankLineFormattingWriter.printText(writer, structures);
    };
    NamespaceDeclarationStructurePrinter.prototype.printText = function (writer, structure) {
        var _this = this;
        structure = this.validateAndGetStructure(structure);
        this.factory.forJSDoc().printDocs(writer, structure.docs);
        this.factory.forModifierableNode().printText(writer, structure);
        if (structure.declarationKind == null || structure.declarationKind !== compiler_1.NamespaceDeclarationKind.Global)
            writer.write((structure.declarationKind || "namespace") + " " + structure.name + " ");
        else
            writer.write("global ");
        writer.inlineBlock(function () {
            _this.factory.forImportDeclaration().printTexts(writer, structure.imports);
            _this.factory.forBodyText({
                isAmbient: structure.hasDeclareKeyword || _this.options.isAmbient
            }).printText(writer, structure);
            _this.conditionalBlankLine(writer, structure.exports);
            _this.factory.forExportDeclaration().printTexts(writer, structure.exports);
        });
    };
    NamespaceDeclarationStructurePrinter.prototype.conditionalBlankLine = function (writer, structures) {
        if (!utils_1.ArrayUtils.isNullOrEmpty(structures))
            writer.conditionalBlankLine(!writer.isAtStartOfFirstLineOfBlock());
    };
    NamespaceDeclarationStructurePrinter.prototype.validateAndGetStructure = function (structure) {
        var name = structure.name.trim();
        if (!utils_1.StringUtils.startsWith(name, "'") && !utils_1.StringUtils.startsWith(name, "\""))
            return structure;
        if (structure.declarationKind === compiler_1.NamespaceDeclarationKind.Namespace)
            throw new errors.InvalidOperationError("Cannot print a namespace with quotes for namespace with name " + structure.name + ". " +
                ("Use " + "NamespaceDeclarationKind.Module" + " instead."));
        structure = utils_1.ObjectUtils.clone(structure);
        utils_1.setValueIfUndefined(structure, "hasDeclareKeyword", true);
        utils_1.setValueIfUndefined(structure, "declarationKind", compiler_1.NamespaceDeclarationKind.Module);
        return structure;
    };
    return NamespaceDeclarationStructurePrinter;
}(FactoryStructurePrinter_1.FactoryStructurePrinter));
exports.NamespaceDeclarationStructurePrinter = NamespaceDeclarationStructurePrinter;
