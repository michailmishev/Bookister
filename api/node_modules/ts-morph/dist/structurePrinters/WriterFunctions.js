"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors = require("../errors");
var StructurePrinterFactory_1 = require("../factories/StructurePrinterFactory");
var structurePrinterFactory = new StructurePrinterFactory_1.StructurePrinterFactory(function () {
    throw new errors.NotImplementedError("Not implemented scenario for getting code format settings when using a writer function. Please open an issue.");
});
/**
 * Writer functions.
 * @remarks These functions are currently very experimental.
 */
var WriterFunctions = /** @class */ (function () {
    function WriterFunctions() {
    }
    /**
     * Gets a writer function for writing the provided object as an object literal expression.
     * @param obj - Object to write.
     */
    WriterFunctions.object = function (obj) {
        return function (writer) {
            var keyNames = Object.keys(obj);
            writer.write("{");
            if (keyNames.length > 0) {
                writer.indentBlock(function () {
                    writeObject();
                });
            }
            writer.write("}");
            function writeObject() {
                for (var i = 0; i < keyNames.length; i++) {
                    if (i > 0)
                        writer.write(",").newLine();
                    var keyName = keyNames[i];
                    var value = obj[keyName];
                    writer.write(keyName);
                    if (value != null) {
                        writer.write(": ");
                        writeValue(writer, value);
                    }
                }
                writer.newLine();
            }
        };
    };
    /** Gets a writer function for writing an object type. */
    WriterFunctions.objectType = function (structure) {
        return function (writer) {
            writer.write("{");
            if (anyPropertyHasValue(structure)) {
                writer.indentBlock(function () {
                    structurePrinterFactory.forTypeElementMemberedNode().printText(writer, structure);
                });
            }
            writer.write("}");
        };
    };
    /** Gets a writer function for writing a union type. */
    WriterFunctions.unionType = function (firstType, secondType) {
        var additionalTypes = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additionalTypes[_i - 2] = arguments[_i];
        }
        return getWriteFunctionForUnionOrIntersectionType("|", tslib_1.__spread([firstType, secondType], additionalTypes));
    };
    /** Gets a writer function for writing an intersection type. */
    WriterFunctions.intersectionType = function (firstType, secondType) {
        var additionalTypes = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additionalTypes[_i - 2] = arguments[_i];
        }
        return getWriteFunctionForUnionOrIntersectionType("&", tslib_1.__spread([firstType, secondType], additionalTypes));
    };
    return WriterFunctions;
}());
exports.WriterFunctions = WriterFunctions;
function getWriteFunctionForUnionOrIntersectionType(separator, args) {
    return function (writer) {
        writeSeparatedByString(writer, " " + separator + " ", args);
    };
}
function anyPropertyHasValue(obj) {
    var e_1, _a;
    try {
        for (var _b = tslib_1.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            if (obj[key] == null)
                continue;
            if (obj[key] instanceof Array && obj[key].length === 0)
                continue;
            return true;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
function writeSeparatedByString(writer, separator, values) {
    for (var i = 0; i < values.length; i++) {
        writer.conditionalWrite(i > 0, separator);
        writeValue(writer, values[i]);
    }
}
function writeValue(writer, value) {
    if (value instanceof Function)
        value(writer);
    else
        writer.write(value.toString());
}
